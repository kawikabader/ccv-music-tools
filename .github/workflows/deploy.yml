name: Deploy to GitHub Pages

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual triggers

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: 'pages'
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Validate Environment Variables
        run: |
          if [ -z "${{ secrets.VITE_SUPABASE_URL }}" ]; then
            echo "‚ùå VITE_SUPABASE_URL is not set"
            exit 1
          fi
          if [ -z "${{ secrets.VITE_SUPABASE_ANON_KEY }}" ]; then
            echo "‚ùå VITE_SUPABASE_ANON_KEY is not set"  
            exit 1
          fi
          echo "‚úÖ Environment variables validated"

      - name: Run Tests
        run: pnpm roster:test run
        continue-on-error: true

      - name: Build Roster App
        run: pnpm roster:build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          NODE_ENV: production

      - name: Prepare Deployment Directory
        run: |
          # Create deployment directory
          mkdir -p deploy

          # Copy root index.html for blank page
          cp index.html deploy/

          # Copy CNAME file for custom domain
          cp CNAME deploy/

          # Copy roster app to /roster subdirectory
          mkdir -p deploy/roster
          cp -r packages/roster/dist/* deploy/roster/

          echo "‚úÖ Deployment directory prepared"
          echo "üìä Deployment structure:"
          find deploy -type f | head -20

      - name: Validate Build Output
        run: |
          if [ ! -d "deploy" ]; then
            echo "‚ùå Deployment directory not found"
            exit 1
          fi
          if [ ! -f "deploy/index.html" ]; then
            echo "‚ùå Root index.html not found"
            exit 1
          fi
          if [ ! -f "deploy/roster/index.html" ]; then
            echo "‚ùå Roster app index.html not found"
            exit 1
          fi
          if [ ! -f "deploy/CNAME" ]; then
            echo "‚ùå CNAME file not found"
            exit 1
          fi
          echo "‚úÖ Build output validated"
          echo "üìä Deployment size:"
          du -sh deploy/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './deploy'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Post-deployment Health Check
        run: |
          echo "üöÄ Deployment completed!"
          echo "üìç Root URL: https://ccvmusic.tools"
          echo "üìç Roster URL: https://ccvmusic.tools/roster"

          # Wait for deployment to propagate
          sleep 30

          # Health check for root domain
          echo "üîç Checking root domain..."
          root_response=$(curl -s -o /dev/null -w "%{http_code}" "https://ccvmusic.tools" || echo "000")
          if [ "$root_response" = "200" ]; then
            echo "‚úÖ Root domain health check passed (HTTP $root_response)"
          else
            echo "‚ö†Ô∏è Root domain health check returned HTTP $root_response"
          fi

          # Health check for roster app
          echo "üîç Checking roster app..."
          roster_response=$(curl -s -o /dev/null -w "%{http_code}" "https://ccvmusic.tools/roster" || echo "000")
          if [ "$roster_response" = "200" ]; then
            echo "‚úÖ Roster app health check passed (HTTP $roster_response)"
          else
            echo "‚ö†Ô∏è Roster app health check returned HTTP $roster_response"
          fi

      - name: Notify on Failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          echo "Please check the logs above for details."
